{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "fileTypes": [
        "s",
        "S"
    ],
    "name": "Motorola 68000 Assembly (GAS syntax)",
    "scopeName": "source.assembly.gas.m68k",
    "patterns": [
        {
            "name": "constant.numeric.hex",
            "match": "(?<!\\w)[$#]?[-+~]?(?i)(?:0x)[A-F0-9]+\\b"
        },
        {
            "name": "constant.numeric.binary",
            "match": "(?<!\\w)[$#]?[-+~]?(?:0[Bb])[01]+\\b"
        },
        {
            "name": "constant.numeric.octal",
            "match": "(?<!\\w)[$#]?[-+~]?0[0-7]*\\b"
        },
        {
            "name": "constant.numeric.decimal",
            "match": "(?<!\\w)[$#]?[-+~]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?[0-9]+)?(?=[-\\s,;<>/+~$%(?:)]|$)"
        },
        {
            "name": "constant.other.decimal",
            "match": "(?<!\\w)[$][-+~]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?[0-9]+)?(?=[-\\s,;<>/+~$%(?:){}]|$)"
        },
        {
            "name": "constant.character",
            "match": "(?<!\\w)[$]?(?i)'(?:[!-\\[\\]-~]|\\\\(?:[\\\\bfnrt]|x[0-9a-f]{1,2}|[0-9]{3}))(?!')"
        },
        {
            "name": "keyword.control.subsection",
            "match": "(?<!\\w)(?i:\\.(?:allow_index_reg|app-file|asci[iz]|b?align|bundle_(?:align_mode|(?:un)?lock)|bss|[42]?byte|cfi_(?:sections|startproc|endproc|personality|lsda|def_cfa|def_cfa_register|def_cfa_offset|adjust_cfa_offset|offset|rel_offset|register|restore|undefined|same_value|remember_state|return_column|signal_frame|window_save|escape|val_encoded_addr)|code(?:16(?:gcc)?|32|64)|data|def|desc|dim|double|eject|else(?:if)?|end(?:[ei]f|func|[mr])?|exitm|equ(?:iv)?|eqv|err(?:or)?|extern|fail|file|fill|t?float|globa?l|hidden|hword|ident|if(?:def|eqs?|[gl][et]|n?[bc]|n(?:ot)?def|nes?)?|incbin|include|int(?:ernal)?|irpc?|l?comm|lflags|linkonce|loc(?:_mark_labels|al)?|mri|(?:no)?list|long|macro|(?:no)?altmacro|octa|operand_check|org|p2align[wl]?|(?:pop|push)?section|previous|print|protected|p?size|purgem|quad|rept|sbttl|scl|set|secrel32|short|single|skip|sleb128|space|sse_check|stab[dns]|string(?:8|16|32|64)?|struct|subsection|symver|tag|text|title|type|uleb128|val(?:ue)?|version|vtable_(?:entry|inherit)|warning|weak(?:ref)?|word|zero|att_syntax(?:\\s*prefix)?)\\b)|(?:LOCAL\\b)"
        },
        {
            "name": "comment.assembly",
            "match": "(?:# |\\*|//).*$"
        },
        {
            "begin": "\\s*/\\*",
            "end": "\\*/",
            "name": "comment.multiline"
        },
        {
            "name": "comment.slashes",
            "match": "^[ \\t]*/.*$"
        },
        {
            "name": "label.assembly",
            "match": "((\\s+|;|^)(([A-Za-z$_.0-9]|C-[BA])+[:]))",
            "captures": {
                "3": {
                    "name": "keyword.label.assembly"
                }
            }
        },
        {
            "name": "entity.name.tag.data",
            "match": "\\bdc\\.(b|w|l)\\b"
        },
        {
            "name": "variable.parameter.register",
            "match": "%\\s*(a[0-7]|d[0-7]|sp|pc|sr|usp)"
        },
        {
            "name": "entity.name.function.instruction.move",
            "match": "\\b(move|movem)(\\.(b|w|l))?\\b"
        },
        {
            "name": "entity.name.function.instruction.set-clear",
            "match": "\\b(set|clr)\\.(b|w|l)\\b"
        },
        {
            "name": "entity.name.function.instruction.move.other",
            "match": "\\b(moveq|movea|lea|swap)\\b"
        },
        {
            "name": "entity.name.function.instruction.test",
            "match": "\\b(tst|cmp)\\.(b|w|l)\\b"
        },
        {
            "name": "entity.name.function.instruction.arith",
            "match": "\\b(add|addu|addq|sub|subu|subq)\\.(b|w|l)\\b"
        },
        {
            "name": "entity.name.function.instruction.arith-2",
            "match": "\\b(mulu|mul|divu|div)\\b"
        },
        {
            "name": "entity.name.function.instruction.logic",
            "match": "\\b(and|andi|or|neg|eor)\\.(b|w|l)\\b"
        },
        {
            "name": "entity.name.function.instruction.shifts",
            "match": "\\b(lsr|lsl|asl|ror|rol|roxr|roxl)\\.(b|w|l)\\b"
        },
        {
            "name": "entity.name.function.instruction.branch",
            "match": "\\b(db|b|j)(sr|cc|cs|eq|ge|gt|hi|hs|le|ls|lt|mi|ne|pl|vc|vs)(\\.(s|l))?\\b"
        },
        {
            "name": "entity.name.function.instruction.jump",
            "match": "\\b(jmp|bra|dbra)(\\.(s|l))?\\b"
        },
        {
            "name": "entity.name.function.instruction.return",
            "match": "\\b(rts|rtr|rte)\\b"
        }
    ]
}